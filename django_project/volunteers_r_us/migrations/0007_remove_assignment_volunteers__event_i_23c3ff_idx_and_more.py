# volunteers_r_us/migrations/0007_remove_assignment_volunteers__event_i_23c3ff_idx_and_more.py
# Generated by Django 5.2.7 on 2025-10-31 03:13

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models, transaction


def _field_names(model):
    return {f.name for f in model._meta.get_fields()}


def forwards_fill_fks(apps, schema_editor):
    Assignment = apps.get_model('volunteers_r_us', 'Assignment')
    Event = apps.get_model('volunteers_r_us', 'Event')
    user_app, user_model = settings.AUTH_USER_MODEL.split('.')
    User = apps.get_model(user_app, user_model)

    event_fields = _field_names(Event)
    # Try to resolve event by one of these keys in order of likelihood
    event_keys = [k for k in ('code', 'event_id', 'title', 'slug', 'name') if k in event_fields]

    # Build lookups
    events = list(Event.objects.all())
    event_maps = [{getattr(e, k): e.id for e in events if getattr(e, k, None)} for k in event_keys]

    user_fields = _field_names(User)
    user_email_map = {u.email: u.id for u in User.objects.all() if 'email' in user_fields and getattr(u, 'email', None)}
    user_username_map = {u.username: u.id for u in User.objects.all() if 'username' in user_fields and getattr(u, 'username', None)}

    with transaction.atomic():
        for a in Assignment.objects.all():
            # a.event_id and a.volunteer_id are the legacy string columns
            legacy_event = getattr(a, 'event_id', None)
            legacy_user = getattr(a, 'volunteer_id', None)

            eid = None
            if legacy_event:
                for emap in event_maps:
                    eid = emap.get(legacy_event)
                    if eid:
                        break

            uid = None
            if legacy_user:
                uid = user_email_map.get(legacy_user) or user_username_map.get(legacy_user)

            updates = {}
            if eid:
                updates['event_fk_tmp_id'] = eid
            if uid:
                updates['volunteer_fk_tmp_id'] = uid

            if updates:
                Assignment.objects.filter(pk=a.pk).update(**updates)


class Migration(migrations.Migration):

    dependencies = [
        ('volunteers_r_us', '0006_remove_assignment_volunteers__event_i_23c3ff_idx_and_more'),
    ]

    operations = [
        # Remove old indexes and unique_together to avoid conflicts during column changes
        migrations.RemoveIndex(
            model_name='assignment',
            name='volunteers__event_i_23c3ff_idx',
        ),
        migrations.RemoveIndex(
            model_name='assignment',
            name='volunteers__volunte_72def7_idx',
        ),
        migrations.AlterUniqueTogether(
            name='assignment',
            unique_together=set(),
        ),
        migrations.AlterUniqueTogether(
            name='match',
            unique_together=set(),
        ),

        # Keep your other field alterations from the original file
        migrations.AlterField(
            model_name='assignment',
            name='created_by',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_assignments', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterField(
            model_name='event',
            name='location',
            field=models.CharField(max_length=255),
        ),
        migrations.AlterField(
            model_name='event',
            name='required_skills',
            field=models.ManyToManyField(blank=True, related_name='events', to='volunteers_r_us.skill'),
        ),
        migrations.AlterField(
            model_name='event',
            name='urgency',
            field=models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High')], max_length=10),
        ),
        migrations.AlterField(
            model_name='match',
            name='event',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='volunteers_r_us.event'),
        ),
        migrations.AlterField(
            model_name='skill',
            name='name',
            field=models.CharField(max_length=100, unique=True),
        ),

        # --- Start of FK migration plan (temp columns -> backfill -> drop old -> rename) ---

        # 1) Add temp FK columns that will not collide with existing columns
        migrations.AddField(
            model_name='assignment',
            name='event_fk_tmp',
            field=models.ForeignKey(
                to='volunteers_r_us.event',
                null=True,
                blank=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name='+',
            ),
        ),
        migrations.AddField(
            model_name='assignment',
            name='volunteer_fk_tmp',
            field=models.ForeignKey(
                to=settings.AUTH_USER_MODEL,
                null=True,
                blank=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name='+',
            ),
        ),

        # 2) Backfill temp FKs from legacy string columns
        migrations.RunPython(forwards_fill_fks, migrations.RunPython.noop),

        # 3) Drop legacy string columns
        migrations.RemoveField(
            model_name='assignment',
            name='event_id',
        ),
        migrations.RemoveField(
            model_name='assignment',
            name='volunteer_id',
        ),

        # 4) Rename temp FKs to final field names
        migrations.RenameField(
            model_name='assignment',
            old_name='event_fk_tmp',
            new_name='event',
        ),
        migrations.RenameField(
            model_name='assignment',
            old_name='volunteer_fk_tmp',
            new_name='volunteer',
        ),

        # --- End of FK migration plan ---

        # Recreate indexes and unique constraints on the new FK fields
        migrations.AddIndex(
            model_name='assignment',
            index=models.Index(fields=['event', 'status'], name='volunteers__event_i_23c3ff_idx'),
        ),
        migrations.AddIndex(
            model_name='assignment',
            index=models.Index(fields=['volunteer'], name='volunteers__volunte_72def7_idx'),
        ),
        migrations.AddConstraint(
            model_name='assignment',
            constraint=models.UniqueConstraint(fields=('volunteer', 'event'), name='uq_assignment_volunteer_event'),
        ),
        migrations.AddConstraint(
            model_name='match',
            constraint=models.UniqueConstraint(fields=('volunteer', 'event'), name='uq_match_volunteer_event'),
        ),
    ]
